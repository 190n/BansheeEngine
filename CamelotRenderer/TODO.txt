
-----------------------LONGTERM TODO----------------------------------------------------------------
 - Debug tools 
   - Camera controls + world grid
 - Renderable (contains mesh/material)
 - RenderManager (iterated through Renderables and displays them on screen)
   - And its plugin implementation ForwardRenderingManager
 - Integrate with Camelot Editor
 - SceneManager plugin
   - Frustum culling and octree (or some other) acceleration structure
   - Render queue and sorting

-----------------------IMMEDIATE TODO---------------------------------------------------------------





/////
-----------GpuProgramParameters/Pass/Material REFACTOR------------------------------

Finish up GL port:
 - Remove those DefaultHardwareBuffermanagers as I don't think they serve a purpose anymore (OpenGL seems to only use them if API doesn't support hardware buffers, which won't happen on modern hardware)
 - Re-do GL attribute bindings (currently it parses program source manually)
 - Params aren't being initialized anywhere
 - Uniforms or uniform blocks aren't assigned anywhere

Get through capabilities and remove bool/int/float constant counters and instead add uniform, uniform block, input/output component counters

Saving/loading of material params isn't completed (in MAterialRTTI)
Port DX11 to new shader param system
Ability to switch out GpuParamBlocks (i.e. share them between programs)
Ability to create Pass without automatically creating param blocks
Automatically creating a pass should be smart about not creating duplicate param blocks
Port CG so it doesn't attempt to use low level GL shaders (which I have removed)

Handling of array parameters? This needs testing
 - I'm currently ignoring array elements in GL due to the name their names are handled


---------------------------------------------------

RenderSystem::clearFrameBuffer
 - Change so it accepts a RenderTarget as a parameter

RenderSystem::setScissorRect(RECT[] array)
 - Change it so it accepts an array

RenderSystem::setViewport(RECT[] array)
 - Change it so it accepts an array

monitorIndex is ignored in DX11

Creating a primary window and initializing the render system should probably be one step
 - OpenGL requires it anyway in order to get context (Make sure to update GLRenderWindowManager if I change how this works)
 - I can't imagine much use for a render system without a window. (Windowless client is a possibility, but in that case entire render system would not be needed)
 - And if just rendering to texture (or similar) is needed, a hidden window may be used

Don't forget to check out Unity DX11 documentation on how to implement DX11 features (http://docs.unity3d.com/Documentation/Manual/DirectX11.html)

Unity has a common class for both RenderTexture and DepthStencilBuffer
 - Maybe rename DepthStencilBuffer to DepthStencilTexture?

waitForVsync can probably be moved somewhere other than being directly in RenderSystem? (where is it in DX11?)

Keeping a list of all render targets in RenderSystem shouldn't be needed (and calling attach/detach renderTarget). Renderer should determine in what order are render targets presented.

Make CommandQueue not use mutexes and use atomics instead??
Make sure that the simulation can't run faster then the render thread! (Block the main thread until previous render finishes)
Figure out how to handle accessing texture from a non-render thread?
/////



RenderSystem needed modifications
 - Right now HLSL11 CANNOT SPECIFY TEXTURE PARAMETERS! (Pass needs to be extended)
 - Generic buffers (Normal/Structured/Raw/Append/Consume/Indirect)
 - Unordered access view for OM and CS stages (this should probably just be a flag .enableRandomWrite on Texture & Buffer classes)
 - Ability to bind buffers and texture with different type of view (SHADER_RESOURCE & UNORDERED_ACCESS primarily, major others too)
 - Pass needs to be modified
  - Needs to support bool/double/texture1D/textue3D/textureCUBE/texture arrays/MS textures/all types of buffers/structs
  - Needs to support (*void) data type for setting structs in constant buffers
 - TextureBuffer support? (Use for bones when skinning for exaple, as constant buffers are too slow)
 - RW buffers?
 - Tesselation (hull/domain) shader
 - Compute pipeline
 - Stream out (write vertex buffers)
 - Instancing (DrawInstanced, also check DrawIndirect)
 - Dynamic shader linkage (Interfaces and similar)
 - Append/Consume buffer
 - 1D/2D/Cube texture arrays
 - Rendertargets that aren't just 2D (Volumetric (3D) render targets in particular)
 - Readable DepthStencil (needs to be assignable to a shader)
 - Multisampled texture resources
 - Multiple adapters (multi gpu)
 - DX11 allows detachable and reusable depthStencil buffers but right now DX9 and OpenGL just ignore them
   - Also RenderWindow can't have detachable depth stencil buffers for multiple reasons:
     - Resizing a window requires a resize of the depth/stencil buffer, so what to do if the buffer is external?
	 - OpenGL doesn't allow access to primary window buffer anyway
	 - Is there any situation where I actually need to set primary depth buffer?
 - Process OpenGL and make sure to equivalents of DX11 features
  - Exact features that are missing (not an exhaustive list):
    - Vertex buffer stream out (Transform Feedback)
	- GL constant buffers
	- HLSL11 shader equivalents (domain/hull/compute shaders), and advanced shader parameters
 - HLSL9/HLSL11/GLSL/Cg shaders need preprocessor defines & includes

Command buffer TODO:
 - When importing a resource, and registering it with Resources I don't think it properly gets added to the loaded resources array? For some reason shaders get created twice.
 - Doing setPixels_async in the texture doesn't make sure that the user doesn't actually modify the provided PixelData after
    that call.

Mesh
 - Make sure to queue up mesh deletion to make sure it gets destroyed on the render thread

Make initialize & initialize_internal protected?
 - Only their factories and RTTI classes need to access it (and they can be friends)
 - Would need to modify HighLevelGpuProgram::mAssemblerProgram

When saving a resource, make sure resource is properly loaded before saving
  - Add doc to Resources::save that says it will block until render thread updates the resource
  - Add documentation that tells the user that reading a resource non-async will block the thread and execute all queued render commands first
  - Remove Response handlers from Resources

-----------------------BACKLOG TODO---------------------------------------------------------------

HIGH PRIORITY TODO:
 - Issue with deserialization and value types:
  - Value types are only set at the end of deserialization, because I want to be sure all of their fields are initialized. However there is nothing stopping a custom RTTI method from accessing a (yet uninitialized) value in a ptr field. (See CmMaterialRTTI, setTexParam). I need to initialize fields in a better order.
   - Solution?: Set (empty) ptr values immediately, and only load them later
 - GetRenderOperation doesn't consider sub-meshes

Mid priority TODO:
 - Resource handle should store a unique integer ID, which just points to a table of GUIDs. Keeping GUID string everywhere in not efficient.
 - Add a field that tracks % of resource deserialization in BinarySerializer
 - Mesh loading:
  - Example Freefall mesh has one index per vertex, and there are 17k+ vertices. I think I need a post-process step that optimizes them.
  - Imported FBX meshes are too big
  - Search for all remaining "TODO PORT" comments and fix them
  - Ogre performed special DDS loading. I removed that. I'm not sure if I'll need to re-add it?
  - My log is not thread safe yet it is being called from multiple threads.
 - RTTI:
     When defining RTTIType like so: 
      RTTIType<D3D9HLSLProgram, HighLevelGpuProgram, D3D9HLSLProgramRTTI>
     I need to make sure that HighLevelGpuProgram class has valid RTTI type as well. Otherwise the inheritance hierarchy will not be correct. Right now this isn't checked anywhere.

Low priority TODO:
 - Mesh loading:
  - Sub-meshes aren't being transformed by world matrices of their nodes
 - Are resource getting properly unloaded? e.g. when shared_ptr destroys a texture is it removed from gpu?
  - Make sure resources only get properly unloaded at end of every frame. This is because a lot of RenderSystem stuff holds raw ptrs
	to resources, and it keeps them throughout the frame (especially with deferred rendering). Plus this can only be done on the render thread anyway.
 - Remove template from RTTIType and move it to IReflectable? This way i can hopefully move GetRTTITypeStatic and GetRTTIType to IReflectable so I don't
   need to manually implement those for every method.
 - Viewport needs to be updated when I call RenderTarget::setFullscreen/finishSwitchingFullscreen/updateWindowRect/windowMovedOrResized. Currently it's not
 - D3D9Texture::createTextureResources is commented out at the moment. It gets called on device reset, and at that point I should reload texture resources.
  - I should probably keep all resources by DX managed. OpenGL apparently keeps a mirror of all its resources anyway.
 - Device reset and resource re-loading in general
 - In RTTIType it is possible to add a non-plain data type using addPlainField. This can cause memory corruption issues
   if pointer is saved/loaded as a plain field. I need to add a check that ensures the type is POD. 
   See: http://www.boost.org/doc/libs/1_51_0/boost/mpi/datatype.hpp for a possible implementation of a compile time check.
 - Fix up WorkQueue as it doesn't lock when initializing, to make sure threads are actually started before returning
 - DepthStencilBuffer & Texture should possibly share the same interface instead of being two separate classes? I'll need to assign DepthStencil to shaders sometimes. Not possible in DX9 but possible in DX11.
 - CPU reading or writing to a render texture in OpenGL is not supported. (CmGLHardwarePixelBuffer::upload/download). 

Optional TODO:
 - Add precompiled headers to all projects
 - If possible, make sure GLSL uses EntryPoint and Profile fields I have added to GpuProgram
 - Move all x86 libs to x86 folders. Move all binaries to x86 folders as well
 - Serializable callbacks can't be null otherwise compiler complains
 - FBX importer can be greatly sped up by implementing a better allocator
 - Extend texture copy so it accepts different subregions & subresources (currently only entire resource can be copied)
 - Need a way to convert MSAA render texture into a normal render texture

 -----------------------------------------------------------------------------------------------

After everything is polished
 - Each view (i.e. camera) of the scene should be put into its own thread
 - How do I handle multiple mesh formats? Some files need animation, other don't. Some would mabye like to use QTangent, others the proper tangent frame.
  - Asset postprocessor? Imports a regular mesh using normal importers and then postprocesses it into a specialized format?
 - Load texture mips separately so we can unload HQ textures from far away objects (like UE3)
 - Add Unified shader so I can easily switch between HLSL and GLSL shaders (they need same parameters usually, just different code)
    - Maybe just add support for Cg and force everyone to use that? - I'd like to be able to just switch out renderer in a single location and that everything keeps on working without 
	  further modifications.
 - Port boost threads to std threads (CmThreadDefines.h)
 - Remove HardwarePixelBuffer (DX11 doesn't use it, and DX9 and OpenGL textures can be rewritten so they have its methods internally)
 - Multihead device
 - 3D rendering (use low level hardware methods for it)
 
 - Go to Game Engine Architecture book and make a list of Utility systems we will need (Config files, Parsers, File I/O etc)
 - Go to GEA book and read about resource managers before implementing them
   - Actually I should re-read most of the chapers in the book, or all of it

 - OpenGL non-Win32 window files haven't been properly parsed or tested
   - Since I probably can't compile them, try adding them to VS and see what intellisense says?

 - Textures and all other buffers keep a copy of their data in system memory. If there are memory constraints we might need a way to avoid this.

